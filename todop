#!/usr/bin/env python3

from sys import argv
from pathlib import Path

# file contents are all saved to a tmp file, it's only a daily todo after all.
todo_path: str = '/var/tmp/todop'
tmp: Path = Path(todo_path)
if not tmp.is_file():
    with open(todo_path, 'x') as t:
        t.close()

# running the command by itself will show the todo list.
if len(argv) == 1:
    user_command: str = 'list'
# if one argument is given and it's a number, that numbered item is removed.
if len(argv) == 2:
    if argv[1].isnumeric():
        user_command: str = 'done'
        user_number: int = int(argv[1])
    # if the one argument isn't a number, it's treated as a 'command'.
    else:
        user_command: str = argv[1]
        user_string: str = ''
# if more than one argument is given it's assumed all the arguments are
# part of one single todo task.
if len(argv) > 2:
    user_string: str = ''
    user_command: str = 'add'
    for word in argv[1:]:
        user_string += word + ' '

# small function to remove any errant newlines that wind up within the file.
def rm_blank_lines(file) -> None:
    file = Path(file)
    lines: list[str] = file.read_text().splitlines()
    filtered: list[str] = [
        line
        for line in lines
        if line.strip()
    ]
    file.write_text('\n'.join(filtered))

# runs blank line function and enumerates file line by line, including line
# numbers
def list_tasks() -> None:
    print('')
    rm_blank_lines(todo_path)
    with open(todo_path, 'r+') as f:
        lines: list[str] = f.readlines()
    for index, item in enumerate(lines):
        item: str = item.strip('\n')
        print(f' {index + 1}: {item}')
    print('')

# removes specified line item by rewriting the file back to itself
def done_task() -> None:
    with open(todo_path, 'r') as f:
        lines: list[str] = f.readlines()
    with open(todo_path, 'w') as f:
        for index, line in enumerate(lines):
            if index != int(user_number)-1:
                f.write(line)
    list_tasks()

# adds a task to the list using either the command arguments, or 
# input given after the add command. 
# appends user's string to a newline within the temp file.
def add_task() -> None:
    if not user_string:
        with open(todo_path, 'a') as f:
            user_input: str = input()
            f.write(f'\n{user_input}')
    else:
        with open(todo_path, 'a') as f:
            f.write(f'\n{user_string}')
    list_tasks()

# prints a cute little help readout
def show_help() -> None:
    print(
        'Usage: todop [command/number] (todo items in sentence form)\n\n'
        '    Run by itself to show the todo list.\n' 
        '    Add one number as an argument to remove it from the list.\n'
        "    Items can be added quicker with 'todop xyz'\n\n"
        '    Commands:\n'
        '        add        adds a task to the list.\n'
        '        clear      clears all tasks from the list.\n'
    )

# clears the list, starts fresh with a new file on the next run
def clear_file() -> None:
    tmp: Path = Path(todo_path)
    if tmp.is_file():
        tmp.unlink()



# consolidates help operands
if user_command == '-h' or user_command == 'help':
    user_command: str = '--help'

# behavior set by user_command variable which is determined by args
match user_command:
    case 'list':
        list_tasks()
    case 'done':
        done_task()
    case 'add':
        add_task()
    case 'clear':
        clear_file()
    case '--help':
        show_help()
    case other:
        # if no match for the command, it's treated as a todo item
        user_string: str = argv[1]
        add_task()

